## Fonts
# To obtain a list of usable fonts, use:
#
# fc-list : family spacing outline scalable | sort
#
# Requires spacing=100:outline=True:scalable=True to be used

font_family PragmataPro Mono Liga
font_size 12.0
disable_ligatures cursor
text_composition_strategy 1.7 10

# Symbol Map
#
# The following will print which fonts are used to render, useful to map specific ranges:
#
# kitty --debug-font-fallback sh -c "echo '‚ùØ'; read"

# Powerline / Nerd Font Symbols, now handled by PragmataPro
#symbol_map U+23FB-U+23FE,U+2B58,U+E200-U+E2A9,U+E0A0-U+E0A3,U+E0B0-U+E0BF,U+E0C0-U+E0C8,U+E0CC-U+E0CF,U+E0D0-U+E0D2,U+E0D4,U+E700-U+E7C5,U+F000-U+F2E0,U+2665,U+26A1,U+F400-U+F4A8,U+F67C,U+E000-U+E00A,U+F300-U+F313,U+E5FA-U+E62B Symbols Nerd Font
# Dingbats, now handled by PragmataPro
#symbol_map U+2700-U+27BF Symbola

# We need this for VIM integration
allow_remote_control socket-only
listen_on unix:${XDG_RUNTIME_DIR}/kitty-{kitty_pid}.sock
# Shell integration to allow duplicating SSH sessions using the ssh kitten
shell_integration enabled

enable_audio_bell no
visual_bell_duration 0.1
confirm_os_window_close -1

# Use NeoVIM for scrollback buffer
scrollback_lines 20000
# Use a custom config
# We fill a buffer from STDIN (- parameter), then create a terminal display in
# NeoVIM. Then copy the lines of the input buffer into the terminal channel
# and finally remove the input buffer.
# TODO: Prevent opening scrollback buffer when in scrollback pager
# Does not seem to work if we attempt to use it as a separate vimrc
scrollback_pager nvim -u NONE -c 'nnoremap <silent> q :qa!<CR>' -c 'tnoremap <Esc> <C-\><C-n>' -c 'nnoremap i <nop>' -c 'nnoremap I <nop>' -c 'nnoremap a <nop>' -c 'nnoremap A <nop>' -c 'set clipboard+=unnamedplus ft=man nonumber nolist showtabline=0 foldcolumn=0 laststatus=0 paste readonly cmdheight=0' -c 'lua local inputBuf = vim.api.nvim_get_current_buf(); local termBuf = vim.api.nvim_create_buf(true, true); vim.api.nvim_set_current_buf(termBuf); vim.o.modifiable = false; local term = vim.api.nvim_open_term(termBuf, {}); local lines = vim.api.nvim_buf_get_lines(inputBuf, 0, -1, false); vim.api.nvim_buf_delete(inputBuf, { force = true }); local numLines = vim.tbl_count(lines); for i, v in ipairs(lines) do vim.api.nvim_chan_send(term, v); if i < numLines then vim.api.nvim_chan_send(term, "\r\n"); end end' -c 'call cursor(CURSOR_LINE, CURSOR_COLUMN)' -
scrollback_pager_history_size 128
scrollback_fill_enlarged_window yes

# TODO: Window configuration

## Windows

# We have to enable stack to allow "fullscreen" by toggling stack layout
enabled_layouts splits,stack
# Only padding since margin is outside the border of kitty windows
window_margin_width 0
window_padding_width 2 4

## Tabs

tab_bar_style slant
tab_bar_align center
tab_switch_strategy left
tab_title_template "{bell_symbol}{activity_symbol}{index}:{fmt.fg.tab}{title}"
active_tab_title_template "{bell_symbol}{activity_symbol}{fmt.fg.green}{index}{fmt.fg.default}:{fmt.fg.tab}{title}"

include keymap.conf

# Colorschemes

# Default theme
# See current-theme.conf at the bottom for the currently set theme
include themes/base16-tomorrow-night.conf
#include themes/base16-tomorrow.conf

background_opacity 0.9

# Keybinds

# BEGIN_KITTY_THEME
# Base16-tomorrow-night
include current-theme.conf
# END_KITTY_THEME

# Override
include color-overrides.conf
